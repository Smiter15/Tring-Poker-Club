---
import { supabase } from 'src/db/supabase';
import { getOrdinal } from 'src/utils';

import Layout from '@layouts/Layout.astro';
import Table from '@components/Table';
import GameKnockoutNetworkGraph from '@components/GameKnockoutNetworkGraph';

import styles from './_games.module.css';

export async function getStaticPaths() {
  const { data: games, error } = await supabase.from('games').select('slug');

  if (error || !games) {
    console.error('❌ Failed to load game slugs:', error);
    return [];
  }
  return games.map((g) => ({ params: { slug: g.slug } }));
}

const { slug } = Astro.params as { slug: string };

const { data: rawGameData, error: gameError } = await supabase
  .from('games')
  .select(
    `
    id,
    slug,
    season_id,
    season_game,
    played_on,
    no_of_players,
    winner:players!games_winner_id_fkey(
      first_name,
      nickname,
      prefer_nickname,
      slug,
      image_url
    )
  `,
  )
  .eq('slug', slug)
  .single();

if (gameError || !rawGameData) {
  console.error('❌ Could not load game:', gameError);
  throw new Error('Game not found');
}

const { data: rawResultsData, error: resultsError } = await supabase
  .from('game_results')
  .select(
    `
    place,
    points,
    player:players!game_results_player_id_fkey(
      first_name,
      nickname,
      prefer_nickname,
      slug,
      image_url
    )
  `,
  )
  .eq('game_id', rawGameData.id)
  .order('place', { ascending: true });

if (resultsError || !rawResultsData) {
  console.error('❌ Could not load game results:', resultsError);
  throw new Error('Game results not found');
}

const rawGame = rawGameData as any;
const rawResults = rawResultsData as any[];

const formatDate = (iso: string) => {
  const d = new Date(iso);
  const dd = String(d.getDate()).padStart(2, '0');
  const mm = String(d.getMonth() + 1).padStart(2, '0');
  const yy = String(d.getFullYear()).slice(-2);

  return `${dd}/${mm}/${yy}`;
};

const game = {
  id: rawGame.id,
  seasonId: rawGame.season_id,
  seasonGame: rawGame.season_game,
  date: formatDate(rawGame.played_on),
  numberOfPlayers: rawGame.no_of_players,
  winnerFirstName: rawGame.winner?.prefer_nickname
    ? rawGame.winner?.nickname
    : rawGame.winner?.first_name,
  winnerSlug: rawGame.winner?.slug ?? '',
  winnerImage: rawGame.winner?.image_url ?? '',
  slug: rawGame.slug,
};

const tableData = rawResults.map((r) => ({
  place: getOrdinal(r.place),
  name: r.player.prefer_nickname ? r.player.nickname : r.player.first_name,
  playerSlug: r.player.slug,
  playerImage: r.player.image_url,
  points: r.points,
}));

const { data: rawKOs, error: koError } = await supabase
  .from('game_knockouts')
  .select(
    `
    killer:players!game_knockouts_killer_id_fkey(
      slug,
      first_name,
      nickname,
      prefer_nickname,
      image_url
    ),
    victim:players!game_knockouts_victim_id_fkey(
      slug,
      first_name,
      nickname,
      prefer_nickname,
      image_url
    )
  `,
  )
  .eq('game_id', rawGameData.id);

if (koError) {
  console.error('❌ Could not load knockouts:', koError);
}
const displayName = (p: any) => (p.prefer_nickname ? p.nickname : p.first_name);

const events = (rawKOs ?? []).map((k: any) => ({
  killerName: displayName(k.killer),
  killerSlug: k.killer.slug,
  killerImage: k.killer.image_url,
  victimName: displayName(k.victim),
  victimSlug: k.victim.slug,
  victimImage: k.victim.image_url,
}));

const grouped = events.reduce(
  (acc, ev) => {
    const key = ev.killerName;
    if (!acc[key]) {
      acc[key] = {
        killerName: ev.killerName,
        killerSlug: ev.killerSlug,
        killerImage: ev.killerImage,
        victims: {} as Record<string, number>,
      };
    }
    acc[key].victims[ev.victimName] =
      (acc[key].victims[ev.victimName] || 0) + 1;
    return acc;
  },
  {} as Record<
    string,
    {
      killerName: string;
      killerSlug: string;
      killerImage: string;
      victims: Record<string, number>;
    }
  >,
);

const knockoutTableData = Object.values(grouped).map(
  ({ killerName, killerSlug, killerImage, victims }) => ({
    name: killerName,
    playerSlug: killerSlug,
    playerImage: killerImage,

    Victims: Object.entries(victims)
      .map(([victim, count]) => `${victim}${count > 1 ? ` (${count})` : ''}`)
      .join(', '),
  }),
);
---

<style is:global>
  .KnockoutGraph svg image {
    clip-path: circle(50%) !important;
    -webkit-clip-path: circle(50%) !important;
  }
</style>

<Layout title={`Game ${game.seasonGame}`}>
  <div class={styles.container}>
    <h1>
      Season {game.seasonId} - Game {game.seasonGame}
    </h1>
    <p class={styles.date}>{game.date}</p>

    <h2>Winner</h2>
    <div class={styles.winner}>
      <img
        src={game.winnerImage}
        alt={game.winnerFirstName}
        class={styles.winnerImage}
      />
      <a href={`/players/${game.winnerSlug}`} class={styles.winnerLink}>
        {game.winnerFirstName}
      </a>
    </div>

    <h2>Results</h2>
    <Table client:load data={tableData} showEmojis={true} />

    {
      events.length > 0 && (
        <>
          <h2 style={{ marginTop: '50px' }}>Knockouts</h2>
          <Table client:load data={knockoutTableData} />
          <GameKnockoutNetworkGraph client:load events={events} />
        </>
      )
    }
  </div>
</Layout>
