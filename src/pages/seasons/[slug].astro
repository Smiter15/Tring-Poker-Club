---
import Layout from '@layouts/Layout.astro';
import type { MarkdownInstance } from 'astro';

import SeasonLineChart from '../../components/SeasonProgressLineChart';

import styles from './seasons.module.css';

import type { SeasonFrontmatter } from '../../types/season';

export async function getStaticPaths() {
  const seasonFiles = import.meta.glob('../../content/season/*.md', {
    eager: true,
  }) as Record<string, MarkdownInstance<SeasonFrontmatter>>;
  return Object.entries(seasonFiles).map(([_, { frontmatter }]) => ({
    params: { slug: frontmatter.slug },
  }));
}

const { slug } = Astro.params as { slug: string };
const seasonFiles = import.meta.glob('../../content/season/*.md', {
  eager: true,
}) as Record<string, MarkdownInstance<SeasonFrontmatter>>;

const seasonsBySlug = Object.values(seasonFiles).reduce(
  (acc, file) => {
    acc[file.frontmatter.slug] = file;
    return acc;
  },
  {} as Record<string, MarkdownInstance<SeasonFrontmatter>>,
);

const seasonData = seasonsBySlug[slug];
if (!seasonData) throw new Error('Season not found');

const { frontmatter } = seasonData;
const csvRaw = await import(`../../data/season/season-${slug}.csv?raw`);
const lines = csvRaw.default.trim().split('\n');
const headers = lines.shift()!.split(',');
const dateLabels = headers.slice(1);

interface Parsed {
  label: string;
  data: number[];
}

const datasets: Parsed[] = lines.map((line: string) => {
  const cols = line.split(',');
  const player = cols[0];
  const points = cols.slice(1).map((val: string) => parseInt(val) || 0);
  const cumul: number[] = [];

  points.reduce((sum: number, p: number, i: number) => {
    const next = sum + p;
    cumul[i] = next;
    return next;
  }, 0);

  return { label: player, data: cumul };
});
---

<Layout title={`Season ${frontmatter.name}`}>
  <div class={styles.container}>
    <h2>Players</h2>
    <!-- players -->

    <SeasonLineChart client:load labels={dateLabels} datasets={datasets} />
  </div>
</Layout>
